"use strict";(self.webpackChunktruss_docs_2=self.webpackChunktruss_docs_2||[]).push([[932],{36702:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>D,contentTitle:()=>C,default:()=>L,frontMatter:()=>S,metadata:()=>t,toc:()=>U});const t=JSON.parse('{"id":"data/api","title":"Truss API Guide","description":"Using the API","source":"@site/docs/data/api.md","sourceDirName":"data","slug":"/data/api","permalink":"/truss-docs/data/api","draft":false,"unlisted":false,"editUrl":"https://github.com/truss-security/truss-docs/blob/main/docs/data/api.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2,"title":"Truss API Guide","toc_min_heading_level":2,"toc_max_heading_level":3},"sidebar":"apiSidebar","previous":{"title":"Truss API Overview","permalink":"/truss-docs/data/"}}');var s=r(74848),a=r(28453),i=r(96540),o=r(34164),l=r(65627),u=r(56347),c=r(50372),d=r(30604),p=r(11861),h=r(78749);function y(e){return i.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,i.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function m(e){const{values:n,children:r}=e;return(0,i.useMemo)((()=>{const e=n??function(e){return y(e).map((e=>{let{props:{value:n,label:r,attributes:t,default:s}}=e;return{value:n,label:r,attributes:t,default:s}}))}(r);return function(e){const n=(0,p.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,r])}function f(e){let{value:n,tabValues:r}=e;return r.some((e=>e.value===n))}function j(e){let{queryString:n=!1,groupId:r}=e;const t=(0,u.W6)(),s=function(e){let{queryString:n=!1,groupId:r}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!r)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return r??null}({queryString:n,groupId:r});return[(0,d.aZ)(s),(0,i.useCallback)((e=>{if(!s)return;const n=new URLSearchParams(t.location.search);n.set(s,e),t.replace({...t.location,search:n.toString()})}),[s,t])]}function x(e){const{defaultValue:n,queryString:r=!1,groupId:t}=e,s=m(e),[a,o]=(0,i.useState)((()=>function(e){let{defaultValue:n,tabValues:r}=e;if(0===r.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!f({value:n,tabValues:r}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${r.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const t=r.find((e=>e.default))??r[0];if(!t)throw new Error("Unexpected error: 0 tabValues");return t.value}({defaultValue:n,tabValues:s}))),[l,u]=j({queryString:r,groupId:t}),[d,p]=function(e){let{groupId:n}=e;const r=function(e){return e?`docusaurus.tab.${e}`:null}(n),[t,s]=(0,h.Dv)(r);return[t,(0,i.useCallback)((e=>{r&&s.set(e)}),[r,s])]}({groupId:t}),y=(()=>{const e=l??d;return f({value:e,tabValues:s})?e:null})();(0,c.A)((()=>{y&&o(y)}),[y]);return{selectedValue:a,selectValue:(0,i.useCallback)((e=>{if(!f({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);o(e),u(e),p(e)}),[u,p,s]),tabValues:s}}var _=r(9136);const g={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function b(e){let{className:n,block:r,selectedValue:t,selectValue:a,tabValues:i}=e;const u=[],{blockElementScrollPositionUntilNextRender:c}=(0,l.a_)(),d=e=>{const n=e.currentTarget,r=u.indexOf(n),s=i[r].value;s!==t&&(c(n),a(s))},p=e=>{let n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const r=u.indexOf(e.currentTarget)+1;n=u[r]??u[0];break}case"ArrowLeft":{const r=u.indexOf(e.currentTarget)-1;n=u[r]??u[u.length-1];break}}n?.focus()};return(0,s.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.A)("tabs",{"tabs--block":r},n),children:i.map((e=>{let{value:n,label:r,attributes:a}=e;return(0,s.jsx)("li",{role:"tab",tabIndex:t===n?0:-1,"aria-selected":t===n,ref:e=>{u.push(e)},onKeyDown:p,onClick:d,...a,className:(0,o.A)("tabs__item",g.tabItem,a?.className,{"tabs__item--active":t===n}),children:r??n},n)}))})}function E(e){let{lazy:n,children:r,selectedValue:t}=e;const a=(Array.isArray(r)?r:[r]).filter(Boolean);if(n){const e=a.find((e=>e.props.value===t));return e?(0,i.cloneElement)(e,{className:(0,o.A)("margin-top--md",e.props.className)}):null}return(0,s.jsx)("div",{className:"margin-top--md",children:a.map(((e,n)=>(0,i.cloneElement)(e,{key:n,hidden:e.props.value!==t})))})}function v(e){const n=x(e);return(0,s.jsxs)("div",{className:(0,o.A)("tabs-container",g.tabList),children:[(0,s.jsx)(b,{...n,...e}),(0,s.jsx)(E,{...n,...e})]})}function q(e){const n=(0,_.A)();return(0,s.jsx)(v,{...e,children:y(e.children)},String(n))}const P="tabItem_Ymn6";function w(e){let{children:n,hidden:r,className:t}=e;return(0,s.jsx)("div",{role:"tabpanel",className:(0,o.A)(P,t),hidden:r,children:n})}var I=r(58069);const K=e=>{let{example:n}=e;return(0,s.jsxs)(q,{children:[(0,s.jsx)(w,{value:"curl",label:"curl",default:!0,children:(0,s.jsx)(I.A,{language:"shell",showLineNumbers:!0,children:n.curl})}),(0,s.jsx)(w,{value:"javascript",label:"javascript",children:(0,s.jsx)(I.A,{language:"javascript",showLineNumbers:!0,children:n.javascript})}),(0,s.jsx)(w,{value:"python",label:"python",children:(0,s.jsx)(I.A,{language:"python",showLineNumbers:!0,children:n.python})}),(0,s.jsx)(w,{value:"ruby",label:"ruby",children:(0,s.jsx)(I.A,{language:"ruby",showLineNumbers:!0,children:n.ruby})}),(0,s.jsx)(w,{value:"go",label:"go",children:(0,s.jsx)(I.A,{language:"go",showLineNumbers:!0,children:n.go})}),(0,s.jsx)(w,{value:"rust",label:"rust",children:(0,s.jsx)(I.A,{language:"rust",showLineNumbers:!0,children:n.rust})})]})},A={curl:'curl -X \'POST\' \\\n  "https://api.truss-security.com/product/search" \\\n  -H "x-api-key: YOUR_API_KEY" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "days": 2\n  }\'',javascript:"import axios from 'axios';\n\nconst YOUR_API_KEY = 'YOUR_API_KEY';\n\nasync function searchProducts() {\n  try {\n    const response = await axios({\n      method: 'POST',\n      url: 'https://api.truss-security.com/product/search',\n      headers: { \n        'x-api-key': YOUR_API_KEY,\n        'Content-Type': 'application/json'\n      },\n      data: {\n        days: 2\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error:', error);\n    throw error;\n  }\n}",python:"import requests\nimport json\n\nAPI_KEY = 'YOUR_API_KEY'\n\ndef search_products():\n    url = 'https://api.truss-security.com/product/search'\n    headers = {\n        'x-api-key': API_KEY,\n        'Content-Type': 'application/json'\n    }\n    data = {\n        'days': 2\n    }\n    \n    try:\n        response = requests.post(url, headers=headers, json=data)\n        response.raise_for_status()\n        return response.json()\n    except requests.exceptions.RequestException as e:\n        print(f\"Error: {e}\")\n        raise",ruby:"require 'net/http'\nrequire 'uri'\nrequire 'json'\n\nAPI_KEY = 'YOUR_API_KEY'\n\ndef search_products\n  uri = URI('https://api.truss-security.com/product/search')\n  http = Net::HTTP.new(uri.host, uri.port)\n  http.use_ssl = true\n  \n  request = Net::HTTP::Post.new(uri)\n  request['x-api-key'] = API_KEY\n  request['Content-Type'] = 'application/json'\n  request.body = { days: 2 }.to_json\n  \n  begin\n    response = http.request(request)\n    JSON.parse(response.body)\n  rescue StandardError => e\n    puts \"Error: #{e.message}\"\n    raise\n  end\nend",go:'package main\n\nimport (\n    "bytes"\n    "encoding/json"\n    "fmt"\n    "io/ioutil"\n    "net/http"\n)\n\nconst apiKey = "YOUR_API_KEY"\n\ntype SearchRequest struct {\n    Days int `json:"days"`\n}\n\nfunc searchProducts() (map[string]interface{}, error) {\n    url := "https://api.truss-security.com/product/search"\n    data := SearchRequest{Days: 2}\n    \n    jsonData, err := json.Marshal(data)\n    if err != nil {\n        return nil, fmt.Errorf("error marshaling JSON: %v", err)\n    }\n    \n    req, err := http.NewRequest("POST", url, bytes.NewBuffer(jsonData))\n    if err != nil {\n        return nil, fmt.Errorf("error creating request: %v", err)\n    }\n    \n    req.Header.Set("x-api-key", apiKey)\n    req.Header.Set("Content-Type", "application/json")\n    \n    client := &http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        return nil, fmt.Errorf("error making request: %v", err)\n    }\n    defer resp.Body.Close()\n    \n    body, err := ioutil.ReadAll(resp.Body)\n    if err != nil {\n        return nil, fmt.Errorf("error reading response: %v", err)\n    }\n    \n    var result map[string]interface{}\n    if err := json.Unmarshal(body, &result); err != nil {\n        return nil, fmt.Errorf("error parsing response: %v", err)\n    }\n    \n    return result, nil\n}',rust:'use reqwest::Client;\nuse serde_json::{json, Value};\nuse anyhow::Result;\n\nconst API_KEY: &str = "YOUR_API_KEY";\n\nasync fn search_products() -> Result<Value> {\n    let client = Client::new();\n    \n    let response = client\n        .post("https://api.truss-security.com/product/search")\n        .header("x-api-key", API_KEY)\n        .header("Content-Type", "application/json")\n        .json(&json!({\n            "days": 2\n        }))\n        .send()\n        .await?;\n    \n    let data = response.json::<Value>().await?;\n    Ok(data)\n}',rust:'use reqwest::Client;\nuse serde_json::{json, Value};\nuse anyhow::Result;\n\nconst API_KEY: &str = "YOUR_API_KEY";\n\nasync fn search_products() -> Result<Value> {\n    let client = Client::new();\n    \n    let response = client\n        .post("https://api.truss-security.com/product/search")\n        .header("x-api-key", API_KEY)\n        .header("Content-Type", "application/json")\n        .json(&json!({\n            "days": 2\n        }))\n        .send()\n        .await?;\n    \n    let data = response.json::<Value>().await?;\n    Ok(data)\n}',rust:'use reqwest::Client;\nuse serde_json::{json, Value};\nuse anyhow::Result;\n\nconst API_KEY: &str = "YOUR_API_KEY";\n\nasync fn search_products() -> Result<Value> {\n    let client = Client::new();\n    \n    let response = client\n        .post("https://api.truss-security.com/product/search")\n        .header("x-api-key", API_KEY)\n        .header("Content-Type", "application/json")\n        .json(&json!({\n            "days": 2\n        }))\n        .send()\n        .await?;\n    \n    let data = response.json::<Value>().await?;\n    Ok(data)\n}'},Y={curl:'curl -X \'POST\' \\\n  "https://api.truss-security.com/product/search" \\\n  -H "x-api-key: YOUR_API_KEY" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "days": 2,\n    "LastEvaluatedKey": {\n      "GSI1PK": "PROD",\n      "SK": "VER#0",\n      "GSI1SK": 1717377712019,\n      "PK": "PROD#01HKDT164VYRS50ZQ8RJEHHBH0"\n    }\n  }\'',javascript:"import axios from 'axios';\n\nconst YOUR_API_KEY = 'YOUR_API_KEY';\n\nexport const trussApi = async (filter) => {\n  const server = 'https://api.truss-security.com'\n  const searchEndpoint = '/product/search'\n  const url = server + searchEndpoint\n  try {\n    const options = {\n      method: 'POST',\n      headers: { \n        'x-api-key': YOUR_API_KEY\n      },\n      data: filter,\n      url,\n    };\n    const response = await axios(options);\n    return response.data\n  } catch (err) {\n    console.log('HTTP Error: ', err)\n    throw err\n  }\n}\n\nexport async function fetchAllPages(filter) {\n  const allItems = [];\n  let lastEvaluatedKey;\n  \n  try {\n    do {\n      const currentFilter = {\n        ...filter,\n        LastEvaluatedKey: lastEvaluatedKey\n      };\n      const { result } = await trussApi(currentFilter);\n      allItems.push(...result.Items);\n      lastEvaluatedKey = result.LastEvaluatedKey;\n    } while (lastEvaluatedKey);\n\n    return allItems;\n  } catch (error) {\n    throw new Error(`Failed to fetch pages: ${error.message}`);\n  }\n}",python:"import requests\nimport json\n\nAPI_KEY = 'YOUR_API_KEY'\n\ndef fetch_all_pages(filter_params):\n    url = 'https://api.truss-security.com/product/search'\n    headers = {\n        'x-api-key': API_KEY,\n        'Content-Type': 'application/json'\n    }\n    all_items = []\n    last_evaluated_key = None\n    \n    try:\n        while True:\n            if last_evaluated_key:\n                filter_params['LastEvaluatedKey'] = last_evaluated_key\n                \n            response = requests.post(url, headers=headers, json=filter_params)\n            response.raise_for_status()\n            result = response.json()['result']\n            \n            all_items.extend(result['Items'])\n            last_evaluated_key = result.get('LastEvaluatedKey')\n            \n            if not last_evaluated_key:\n                break\n                \n        return all_items\n    except requests.exceptions.RequestException as e:\n        print(f\"Error: {e}\")\n        raise",ruby:"require 'net/http'\nrequire 'uri'\nrequire 'json'\n\nAPI_KEY = 'YOUR_API_KEY'\n\ndef fetch_all_pages(filter_params)\n  uri = URI('https://api.truss-security.com/product/search')\n  http = Net::HTTP.new(uri.host, uri.port)\n  http.use_ssl = true\n  \n  all_items = []\n  last_evaluated_key = nil\n  \n  begin\n    loop do\n      filter_params['LastEvaluatedKey'] = last_evaluated_key if last_evaluated_key\n      \n      request = Net::HTTP::Post.new(uri)\n      request['x-api-key'] = API_KEY\n      request['Content-Type'] = 'application/json'\n      request.body = filter_params.to_json\n      \n      response = http.request(request)\n      result = JSON.parse(response.body)['result']\n      \n      all_items.concat(result['Items'])\n      last_evaluated_key = result['LastEvaluatedKey']\n      \n      break unless last_evaluated_key\n    end\n    \n    all_items\n  rescue StandardError => e\n    puts \"Error: #{e.message}\"\n    raise\n  end\nend",go:'package main\n\nimport (\n    "bytes"\n    "encoding/json"\n    "fmt"\n    "io/ioutil"\n    "net/http"\n)\n\nconst apiKey = "YOUR_API_KEY"\n\ntype SearchRequest struct {\n    Days int `json:"days"`\n    LastEvaluatedKey map[string]interface{} `json:"LastEvaluatedKey,omitempty"`\n}\n\nfunc fetchAllPages(filter SearchRequest) ([]map[string]interface{}, error) {\n    url := "https://api.truss-security.com/product/search"\n    var allItems []map[string]interface{}\n    \n    for {\n        jsonData, err := json.Marshal(filter)\n        if err != nil {\n            return nil, fmt.Errorf("error marshaling JSON: %v", err)\n        }\n        \n        req, err := http.NewRequest("POST", url, bytes.NewBuffer(jsonData))\n        if err != nil {\n            return nil, fmt.Errorf("error creating request: %v", err)\n        }\n        \n        req.Header.Set("x-api-key", apiKey)\n        req.Header.Set("Content-Type", "application/json")\n        \n        client := &http.Client{}\n        resp, err := client.Do(req)\n        if err != nil {\n            return nil, fmt.Errorf("error making request: %v", err)\n        }\n        \n        body, err := ioutil.ReadAll(resp.Body)\n        resp.Body.Close()\n        if err != nil {\n            return nil, fmt.Errorf("error reading response: %v", err)\n        }\n        \n        var result map[string]interface{}\n        if err := json.Unmarshal(body, &result); err != nil {\n            return nil, fmt.Errorf("error parsing response: %v", err)\n        }\n        \n        resultData := result["result"].(map[string]interface{})\n        items := resultData["Items"].([]interface{})\n        for _, item := range items {\n            allItems = append(allItems, item.(map[string]interface{}))\n        }\n        \n        lastEvaluatedKey, exists := resultData["LastEvaluatedKey"]\n        if !exists || lastEvaluatedKey == nil {\n            break\n        }\n        \n        filter.LastEvaluatedKey = lastEvaluatedKey.(map[string]interface{})\n    }\n    \n    return allItems, nil\n}',rust:'use reqwest::Client;\nuse serde_json::{json, Value};\nuse anyhow::Result;\n\nconst API_KEY: &str = "YOUR_API_KEY";\n\nasync fn fetch_all_pages(mut filter: Value) -> Result<Vec<Value>> {\n    let client = Client::new();\n    let mut all_items = Vec::new();\n    \n    loop {\n        let response = client\n            .post("https://api.truss-security.com/product/search")\n            .header("x-api-key", API_KEY)\n            .header("Content-Type", "application/json")\n            .json(&filter)\n            .send()\n            .await?;\n        \n        let result = response.json::<Value>().await?;\n        let items = result["result"]["Items"].as_array()\n            .ok_or_else(|| anyhow::anyhow!("Invalid response format"))?;\n        all_items.extend(items.clone());\n        \n        if let Some(last_key) = result["result"]["LastEvaluatedKey"].as_object() {\n            filter["LastEvaluatedKey"] = json!(last_key);\n        } else {\n            break;\n        }\n    }\n    \n    Ok(all_items)\n}\n\n#[tokio::main]\nasync fn main() -> Result<()> {\n    let filter = json!({\n        "days": 2\n    });\n    \n    match fetch_all_pages(filter).await {\n        Ok(items) => println!("Total items: {}", items.len()),\n        Err(e) => eprintln!("Error: {}", e),\n    }\n    Ok(())\n}'},R={curl:'curl -X \'POST\' \\\n  "https://api.truss-security.com/product/search" \\\n  -H "x-api-key: YOUR_API_KEY" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "startDate": "2024-06-02",\n    "endDate": "2024-06-03"\n  }\'',javascript:"import axios from 'axios';\n\nconst YOUR_API_KEY = 'YOUR_API_KEY';\n\nasync function searchByDate() {\n  try {\n    const response = await axios({\n      method: 'POST',\n      url: 'https://api.truss-security.com/product/search',\n      headers: { \n        'x-api-key': YOUR_API_KEY,\n        'Content-Type': 'application/json'\n      },\n      data: {\n        startDate: \"2024-06-02\",\n        endDate: \"2024-06-03\"\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error:', error);\n    throw error;\n  }\n}",python:"import requests\nimport json\n\nAPI_KEY = 'YOUR_API_KEY'\n\ndef search_by_date():\n    url = 'https://api.truss-security.com/product/search'\n    headers = {\n        'x-api-key': API_KEY,\n        'Content-Type': 'application/json'\n    }\n    data = {\n        'startDate': '2024-06-02',\n        'endDate': '2024-06-03'\n    }\n    \n    try:\n        response = requests.post(url, headers=headers, json=data)\n        response.raise_for_status()\n        return response.json()\n    except requests.exceptions.RequestException as e:\n        print(f\"Error: {e}\")\n        raise",ruby:"require 'net/http'\nrequire 'uri'\nrequire 'json'\n\nAPI_KEY = 'YOUR_API_KEY'\n\ndef search_by_date\n  uri = URI('https://api.truss-security.com/product/search')\n  http = Net::HTTP.new(uri.host, uri.port)\n  http.use_ssl = true\n  \n  request = Net::HTTP::Post.new(uri)\n  request['x-api-key'] = API_KEY\n  request['Content-Type'] = 'application/json'\n  request.body = {\n    startDate: '2024-06-02',\n    endDate: '2024-06-03'\n  }.to_json\n  \n  begin\n    response = http.request(request)\n    JSON.parse(response.body)\n  rescue StandardError => e\n    puts \"Error: #{e.message}\"\n    raise\n  end\nend",go:'package main\n\nimport (\n    "bytes"\n    "encoding/json"\n    "fmt"\n    "io/ioutil"\n    "net/http"\n)\n\nconst apiKey = "YOUR_API_KEY"\n\ntype DateSearchRequest struct {\n    StartDate string `json:"startDate"`\n    EndDate   string `json:"endDate"`\n}\n\nfunc searchByDate() (map[string]interface{}, error) {\n    url := "https://api.truss-security.com/product/search"\n    data := DateSearchRequest{\n        StartDate: "2024-06-02",\n        EndDate:   "2024-06-03",\n    }\n    \n    jsonData, err := json.Marshal(data)\n    if err != nil {\n        return nil, fmt.Errorf("error marshaling JSON: %v", err)\n    }\n    \n    req, err := http.NewRequest("POST", url, bytes.NewBuffer(jsonData))\n    if err != nil {\n        return nil, fmt.Errorf("error creating request: %v", err)\n    }\n    \n    req.Header.Set("x-api-key", apiKey)\n    req.Header.Set("Content-Type", "application/json")\n    \n    client := &http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        return nil, fmt.Errorf("error making request: %v", err)\n    }\n    defer resp.Body.Close()\n    \n    body, err := ioutil.ReadAll(resp.Body)\n    if err != nil {\n        return nil, fmt.Errorf("error reading response: %v", err)\n    }\n    \n    var result map[string]interface{}\n    if err := json.Unmarshal(body, &result); err != nil {\n        return nil, fmt.Errorf("error parsing response: %v", err)\n    }\n    \n    return result, nil\n}',rust:'use reqwest::Client;\nuse serde_json::{json, Value};\nuse anyhow::Result;\n\nconst API_KEY: &str = "YOUR_API_KEY";\n\nasync fn search_by_date() -> Result<Value> {\n    let client = Client::new();\n    \n    let response = client\n        .post("https://api.truss-security.com/product/search")\n        .header("x-api-key", API_KEY)\n        .header("Content-Type", "application/json")\n        .json(&json!({\n            "startDate": "2024-06-02",\n            "endDate": "2024-06-03"\n        }))\n        .send()\n        .await?;\n    \n    let data = response.json::<Value>().await?;\n    Ok(data)\n}\n\n#[tokio::main]\nasync fn main() -> Result<()> {\n    match search_by_date().await {\n        Ok(data) => println!("Response: {:?}", data),\n        Err(e) => eprintln!("Error: {}", e),\n    }\n    Ok(())\n}'},T={curl:'curl -X \'POST\' \\\n  "https://api.truss-security.com/product/search" \\\n  -H "x-api-key: YOUR_API_KEY" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "days": 3\n  }\'',javascript:"import axios from 'axios';\n\nconst YOUR_API_KEY = 'YOUR_API_KEY';\n\nasync function searchByDays() {\n  try {\n    const response = await axios({\n      method: 'POST',\n      url: 'https://api.truss-security.com/product/search',\n      headers: { \n        'x-api-key': YOUR_API_KEY,\n        'Content-Type': 'application/json'\n      },\n      data: {\n        days: 3\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error:', error);\n    throw error;\n  }\n}",python:"import requests\nimport json\n\nAPI_KEY = 'YOUR_API_KEY'\n\ndef search_by_days():\n    url = 'https://api.truss-security.com/product/search'\n    headers = {\n        'x-api-key': API_KEY,\n        'Content-Type': 'application/json'\n    }\n    data = {\n        'days': 3\n    }\n    \n    try:\n        response = requests.post(url, headers=headers, json=data)\n        response.raise_for_status()\n        return response.json()\n    except requests.exceptions.RequestException as e:\n        print(f\"Error: {e}\")\n        raise",ruby:"require 'net/http'\nrequire 'uri'\nrequire 'json'\n\nAPI_KEY = 'YOUR_API_KEY'\n\ndef search_by_days\n  uri = URI('https://api.truss-security.com/product/search')\n  http = Net::HTTP.new(uri.host, uri.port)\n  http.use_ssl = true\n  \n  request = Net::HTTP::Post.new(uri)\n  request['x-api-key'] = API_KEY\n  request['Content-Type'] = 'application/json'\n  request.body = { days: 3 }.to_json\n  \n  begin\n    response = http.request(request)\n    JSON.parse(response.body)\n  rescue StandardError => e\n    puts \"Error: #{e.message}\"\n    raise\n  end\nend",go:'package main\n\nimport (\n    "bytes"\n    "encoding/json"\n    "fmt"\n    "io/ioutil"\n    "net/http"\n)\n\nconst apiKey = "YOUR_API_KEY"\n\ntype DaysSearchRequest struct {\n    Days int `json:"days"`\n}\n\nfunc searchByDays() (map[string]interface{}, error) {\n    url := "https://api.truss-security.com/product/search"\n    data := DaysSearchRequest{Days: 3}\n    \n    jsonData, err := json.Marshal(data)\n    if err != nil {\n        return nil, fmt.Errorf("error marshaling JSON: %v", err)\n    }\n    \n    req, err := http.NewRequest("POST", url, bytes.NewBuffer(jsonData))\n    if err != nil {\n        return nil, fmt.Errorf("error creating request: %v", err)\n    }\n    \n    req.Header.Set("x-api-key", apiKey)\n    req.Header.Set("Content-Type", "application/json")\n    \n    client := &http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        return nil, fmt.Errorf("error making request: %v", err)\n    }\n    defer resp.Body.Close()\n    \n    body, err := ioutil.ReadAll(resp.Body)\n    if err != nil {\n        return nil, fmt.Errorf("error reading response: %v", err)\n    }\n    \n    var result map[string]interface{}\n    if err := json.Unmarshal(body, &result); err != nil {\n        return nil, fmt.Errorf("error parsing response: %v", err)\n    }\n    \n    return result, nil\n}',rust:'use reqwest::Client;\nuse serde_json::{json, Value};\nuse anyhow::Result;\n\nconst API_KEY: &str = "YOUR_API_KEY";\n\nasync fn search_by_days() -> Result<Value> {\n    let client = Client::new();\n    \n    let response = client\n        .post("https://api.truss-security.com/product/search")\n        .header("x-api-key", API_KEY)\n        .header("Content-Type", "application/json")\n        .json(&json!({\n            "days": 3\n        }))\n        .send()\n        .await?;\n    \n    let data = response.json::<Value>().await?;\n    Ok(data)\n}\n\n#[tokio::main]\nasync fn main() -> Result<()> {\n    match search_by_days().await {\n        Ok(data) => println!("Response: {:?}", data),\n        Err(e) => eprintln!("Error: {}", e),\n    }\n    Ok(())\n}'},O={curl:'curl -X \'POST\' \\\n  "https://api.truss-security.com/product/search" \\\n  -H "x-api-key: YOUR_API_KEY" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "days": 3,\n    "author": ["TOR Project"],\n    "tags": ["C2", "AlphV"]\n  }\'',javascript:"import axios from 'axios';\n\nconst YOUR_API_KEY = 'YOUR_API_KEY';\n\nasync function searchWithFilters() {\n  try {\n    const response = await axios({\n      method: 'POST',\n      url: 'https://api.truss-security.com/product/search',\n      headers: { \n        'x-api-key': YOUR_API_KEY,\n        'Content-Type': 'application/json'\n      },\n      data: {\n        days: 3,\n        author: [\"TOR Project\"],\n        tags: [\"C2\", \"AlphV\"]\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error:', error);\n    throw error;\n  }\n}",python:"import requests\nimport json\n\nAPI_KEY = 'YOUR_API_KEY'\n\ndef search_with_filters():\n    url = 'https://api.truss-security.com/product/search'\n    headers = {\n        'x-api-key': API_KEY,\n        'Content-Type': 'application/json'\n    }\n    data = {\n        'days': 3,\n        'author': ['TOR Project'],\n        'tags': ['C2', 'AlphV']\n    }\n    \n    try:\n        response = requests.post(url, headers=headers, json=data)\n        response.raise_for_status()\n        return response.json()\n    except requests.exceptions.RequestException as e:\n        print(f\"Error: {e}\")\n        raise",ruby:"require 'net/http'\nrequire 'uri'\nrequire 'json'\n\nAPI_KEY = 'YOUR_API_KEY'\n\ndef search_with_filters\n  uri = URI('https://api.truss-security.com/product/search')\n  http = Net::HTTP.new(uri.host, uri.port)\n  http.use_ssl = true\n  \n  request = Net::HTTP::Post.new(uri)\n  request['x-api-key'] = API_KEY\n  request['Content-Type'] = 'application/json'\n  request.body = {\n    days: 3,\n    author: ['TOR Project'],\n    tags: ['C2', 'AlphV']\n  }.to_json\n  \n  begin\n    response = http.request(request)\n    JSON.parse(response.body)\n  rescue StandardError => e\n    puts \"Error: #{e.message}\"\n    raise\n  end\nend",go:'package main\n\nimport (\n    "bytes"\n    "encoding/json"\n    "fmt"\n    "io/ioutil"\n    "net/http"\n)\n\nconst apiKey = "YOUR_API_KEY"\n\ntype FilterSearchRequest struct {\n    Days   int      `json:"days"`\n    Author []string `json:"author"`\n    Tags   []string `json:"tags"`\n}\n\nfunc searchWithFilters() (map[string]interface{}, error) {\n    url := "https://api.truss-security.com/product/search"\n    data := FilterSearchRequest{\n        Days:   3,\n        Author: []string{"TOR Project"},\n        Tags:   []string{"C2", "AlphV"},\n    }\n    \n    jsonData, err := json.Marshal(data)\n    if err != nil {\n        return nil, fmt.Errorf("error marshaling JSON: %v", err)\n    }\n    \n    req, err := http.NewRequest("POST", url, bytes.NewBuffer(jsonData))\n    if err != nil {\n        return nil, fmt.Errorf("error creating request: %v", err)\n    }\n    \n    req.Header.Set("x-api-key", apiKey)\n    req.Header.Set("Content-Type", "application/json")\n    \n    client := &http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        return nil, fmt.Errorf("error making request: %v", err)\n    }\n    defer resp.Body.Close()\n    \n    body, err := ioutil.ReadAll(resp.Body)\n    if err != nil {\n        return nil, fmt.Errorf("error reading response: %v", err)\n    }\n    \n    var result map[string]interface{}\n    if err := json.Unmarshal(body, &result); err != nil {\n        return nil, fmt.Errorf("error parsing response: %v", err)\n    }\n    \n    return result, nil\n}',rust:'use reqwest::Client;\nuse serde_json::{json, Value};\nuse anyhow::Result;\n\nconst API_KEY: &str = "YOUR_API_KEY";\n\nasync fn search_with_filters() -> Result<Value> {\n    let client = Client::new();\n    \n    let response = client\n        .post("https://api.truss-security.com/product/search")\n        .header("x-api-key", API_KEY)\n        .header("Content-Type", "application/json")\n        .json(&json!({\n            "days": 3,\n            "author": ["TOR Project"],\n            "tags": ["C2", "AlphV"]\n        }))\n        .send()\n        .await?;\n    \n    let data = response.json::<Value>().await?;\n    Ok(data)\n}\n\n#[tokio::main]\nasync fn main() -> Result<()> {\n    match search_with_filters().await {\n        Ok(data) => println!("Response: {:?}", data),\n        Err(e) => eprintln!("Error: {}", e),\n    }\n    Ok(())\n}'},k={curl:'curl -X \'POST\' \\\n  "https://api.truss-security.com/product/search" \\\n  -H "x-api-key: YOUR_API_KEY" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "startdate": 1733616000000,\n    "enddate": 1733961599999,\n    "source": [\n        "OpenPhish"\n    ]\n  }\' | jq',javascript:"import axios from 'axios';\n\nconst YOUR_API_KEY = 'YOUR_API_KEY';\n\nasync function searchProducts() {\n  try {\n    const response = await axios({\n      method: 'POST',\n      url: 'https://api.truss-security.com/product/search',\n      headers: { \n        'x-api-key': YOUR_API_KEY,\n        'Content-Type': 'application/json'\n      },\n      data: {\n        startdate: 1733616000000,\n        enddate: 1733961599999,\n        source: [\"OpenPhish\"]\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error:', error);\n    throw error;\n  }\n}",python:"import requests\nimport json\n\nAPI_KEY = 'YOUR_API_KEY'\n\ndef search_products():\n    url = 'https://api.truss-security.com/product/search'\n    headers = {\n        'x-api-key': API_KEY,\n        'Content-Type': 'application/json'\n    }\n    data = {\n        'startdate': 1733616000000,\n        'enddate': 1733961599999,\n        'source': ['OpenPhish']\n    }\n    \n    try:\n        response = requests.post(url, headers=headers, json=data)\n        response.raise_for_status()\n        return response.json()\n    except requests.exceptions.RequestException as e:\n        print(f\"Error: {e}\")\n        raise",ruby:"require 'net/http'\nrequire 'uri'\nrequire 'json'\n\nAPI_KEY = 'YOUR_API_KEY'\n\ndef search_products\n  uri = URI('https://api.truss-security.com/product/search')\n  http = Net::HTTP.new(uri.host, uri.port)\n  http.use_ssl = true\n  \n  request = Net::HTTP::Post.new(uri)\n  request['x-api-key'] = API_KEY\n  request['Content-Type'] = 'application/json'\n  request.body = {\n    startdate: 1733616000000,\n    enddate: 1733961599999,\n    source: ['OpenPhish']\n  }.to_json\n  \n  begin\n    response = http.request(request)\n    JSON.parse(response.body)\n  rescue StandardError => e\n    puts \"Error: #{e.message}\"\n    raise\n  end\nend",go:'package main\n\nimport (\n    "bytes"\n    "encoding/json"\n    "fmt"\n    "io/ioutil"\n    "net/http"\n)\n\nconst apiKey = "YOUR_API_KEY"\n\ntype SearchRequest struct {\n    StartDate int64    `json:"startdate"`\n    EndDate   int64    `json:"enddate"`\n    Source    []string `json:"source"`\n}\n\nfunc searchProducts() (map[string]interface{}, error) {\n    url := "https://api.truss-security.com/product/search"\n    data := SearchRequest{\n        StartDate: 1733616000000,\n        EndDate:   1733961599999,\n        Source:    []string{"OpenPhish"},\n    }\n    \n    jsonData, err := json.Marshal(data)\n    if err != nil {\n        return nil, fmt.Errorf("error marshaling JSON: %v", err)\n    }\n    \n    req, err := http.NewRequest("POST", url, bytes.NewBuffer(jsonData))\n    if err != nil {\n        return nil, fmt.Errorf("error creating request: %v", err)\n    }\n    \n    req.Header.Set("x-api-key", apiKey)\n    req.Header.Set("Content-Type", "application/json")\n    \n    client := &http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        return nil, fmt.Errorf("error making request: %v", err)\n    }\n    defer resp.Body.Close()\n    \n    body, err := ioutil.ReadAll(resp.Body)\n    if err != nil {\n        return nil, fmt.Errorf("error reading response: %v", err)\n    }\n    \n    var result map[string]interface{}\n    if err := json.Unmarshal(body, &result); err != nil {\n        return nil, fmt.Errorf("error parsing response: %v", err)\n    }\n    \n    return result, nil\n}',rust:'use reqwest::Client;\nuse serde_json::{json, Value};\nuse anyhow::Result;\n\nconst API_KEY: &str = "YOUR_API_KEY";\n\nasync fn search_products() -> Result<Value> {\n    let client = Client::new();\n    \n    let response = client\n        .post("https://api.truss-security.com/product/search")\n        .header("x-api-key", API_KEY)\n        .header("Content-Type", "application/json")\n        .json(&json!({\n            "startdate": 1733616000000,\n            "enddate": 1733961599999,\n            "source": ["OpenPhish"]\n        }))\n        .send()\n        .await?;\n    \n    let data = response.json::<Value>().await?;\n    Ok(data)\n}'},N={curl:'curl -X \'POST\' \\\n  "https://api.truss-security.com/product/search" \\\n  -H "x-api-key: YOUR_API_KEY" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "startdate": 1733616000000,\n    "enddate": 1733961599999,\n    "source": [\n        "OpenPhish"\n    ],\n    "LastEvaluatedKey": {\n      "SK": "VER#0",\n      "GSI3PK": "OpenPhish",\n      "PK": "PROD#01JEMBFNT12JV97ZT3GVBF2X2J",\n      "GSI3SK": 1733702440770\n    }\n  }\' | jq',javascript:"import axios from 'axios';\n\nconst YOUR_API_KEY = 'YOUR_API_KEY';\n\nasync function fetchAllResults() {\n  const baseQuery = {\n    startdate: 1733616000000,\n    enddate: 1733961599999,\n    source: [\"OpenPhish\"]\n  };\n\n  try {\n    // Initial query\n    let response = await axios({\n      method: 'POST',\n      url: 'https://api.truss-security.com/product/search',\n      headers: { \n        'x-api-key': YOUR_API_KEY,\n        'Content-Type': 'application/json'\n      },\n      data: baseQuery\n    });\n\n    let results = response.data;\n    \n    // If LastEvaluatedKey exists, fetch next page\n    if (results.LastEvaluatedKey) {\n      const nextQuery = {\n        ...baseQuery,\n        LastEvaluatedKey: results.LastEvaluatedKey\n      };\n\n      response = await axios({\n        method: 'POST',\n        url: 'https://api.truss-security.com/product/search',\n        headers: { \n          'x-api-key': YOUR_API_KEY,\n          'Content-Type': 'application/json'\n        },\n        data: nextQuery\n      });\n    }\n\n    return response.data;\n  } catch (error) {\n    console.error('Error:', error);\n    throw error;\n  }\n}",python:"import requests\nimport json\n\nAPI_KEY = 'YOUR_API_KEY'\n\ndef fetch_all_results():\n    url = 'https://api.truss-security.com/product/search'\n    headers = {\n        'x-api-key': API_KEY,\n        'Content-Type': 'application/json'\n    }\n    base_query = {\n        'startdate': 1733616000000,\n        'enddate': 1733961599999,\n        'source': ['OpenPhish']\n    }\n    \n    try:\n        # Initial query\n        response = requests.post(url, headers=headers, json=base_query)\n        response.raise_for_status()\n        results = response.json()\n        \n        # If LastEvaluatedKey exists, fetch next page\n        if 'LastEvaluatedKey' in results:\n            next_query = base_query.copy()\n            next_query['LastEvaluatedKey'] = results['LastEvaluatedKey']\n            \n            response = requests.post(url, headers=headers, json=next_query)\n            response.raise_for_status()\n            \n        return response.json()\n    except requests.exceptions.RequestException as e:\n        print(f\"Error: {e}\")\n        raise",ruby:"require 'net/http'\nrequire 'uri'\nrequire 'json'\n\nAPI_KEY = 'YOUR_API_KEY'\n\ndef fetch_all_results\n  uri = URI('https://api.truss-security.com/product/search')\n  http = Net::HTTP.new(uri.host, uri.port)\n  http.use_ssl = true\n  \n  base_query = {\n    startdate: 1733616000000,\n    enddate: 1733961599999,\n    source: ['OpenPhish']\n  }\n  \n  begin\n    # Initial query\n    request = Net::HTTP::Post.new(uri)\n    request['x-api-key'] = API_KEY\n    request['Content-Type'] = 'application/json'\n    request.body = base_query.to_json\n    \n    response = http.request(request)\n    results = JSON.parse(response.body)\n    \n    # If LastEvaluatedKey exists, fetch next page\n    if results['LastEvaluatedKey']\n      next_query = base_query.merge({\n        'LastEvaluatedKey' => results['LastEvaluatedKey']\n      })\n      \n      request.body = next_query.to_json\n      response = http.request(request)\n    end\n    \n    JSON.parse(response.body)\n  rescue StandardError => e\n    puts \"Error: #{e.message}\"\n    raise\n  end\nend",go:'package main\n\nimport (\n    "bytes"\n    "encoding/json"\n    "fmt"\n    "io/ioutil"\n    "net/http"\n)\n\nconst apiKey = "YOUR_API_KEY"\n\ntype QueryRequest struct {\n    StartDate        int64                    `json:"startdate"`\n    EndDate          int64                    `json:"enddate"`\n    Source           []string                 `json:"source"`\n    LastEvaluatedKey map[string]interface{}   `json:"LastEvaluatedKey,omitempty"`\n}\n\nfunc fetchAllResults() (map[string]interface{}, error) {\n    url := "https://api.truss-security.com/product/search"\n    baseQuery := QueryRequest{\n        StartDate: 1733616000000,\n        EndDate:   1733961599999,\n        Source:    []string{"OpenPhish"},\n    }\n    \n    // Initial query\n    jsonData, err := json.Marshal(baseQuery)\n    if err != nil {\n        return nil, fmt.Errorf("error marshaling JSON: %v", err)\n    }\n    \n    req, err := http.NewRequest("POST", url, bytes.NewBuffer(jsonData))\n    if err != nil {\n        return nil, fmt.Errorf("error creating request: %v", err)\n    }\n    \n    req.Header.Set("x-api-key", apiKey)\n    req.Header.Set("Content-Type", "application/json")\n    \n    client := &http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        return nil, fmt.Errorf("error making request: %v", err)\n    }\n    defer resp.Body.Close()\n    \n    body, err := ioutil.ReadAll(resp.Body)\n    if err != nil {\n        return nil, fmt.Errorf("error reading response: %v", err)\n    }\n    \n    var result map[string]interface{}\n    if err := json.Unmarshal(body, &result); err != nil {\n        return nil, fmt.Errorf("error parsing response: %v", err)\n    }\n    \n    // If LastEvaluatedKey exists, fetch next page\n    if lastKey, exists := result["LastEvaluatedKey"].(map[string]interface{}); exists {\n        baseQuery.LastEvaluatedKey = lastKey\n        \n        jsonData, _ = json.Marshal(baseQuery)\n        req, _ = http.NewRequest("POST", url, bytes.NewBuffer(jsonData))\n        req.Header.Set("x-api-key", apiKey)\n        req.Header.Set("Content-Type", "application/json")\n        \n        resp, err = client.Do(req)\n        if err != nil {\n            return nil, fmt.Errorf("error making request: %v", err)\n        }\n        defer resp.Body.Close()\n        \n        body, _ = ioutil.ReadAll(resp.Body)\n        json.Unmarshal(body, &result)\n    }\n    \n    return result, nil\n}',rust:'use reqwest::Client;\nuse serde_json::{json, Value};\nuse anyhow::Result;\n\nconst API_KEY: &str = "YOUR_API_KEY";\n\nasync fn fetch_all_results() -> Result<Value> {\n    let client = Client::new();\n    let base_query = json!({\n        "startdate": 1733616000000,\n        "enddate": 1733961599999,\n        "source": ["OpenPhish"]\n    });\n    \n    // Initial query\n    let response = client\n        .post("https://api.truss-security.com/product/search")\n        .header("x-api-key", API_KEY)\n        .header("Content-Type", "application/json")\n        .json(&base_query)\n        .send()\n        .await?;\n    \n    let mut result = response.json::<Value>().await?;\n    \n    // If LastEvaluatedKey exists, fetch next page\n    if let Some(last_key) = result["LastEvaluatedKey"].as_object() {\n        let mut next_query = base_query.as_object().unwrap().clone();\n        next_query.insert("LastEvaluatedKey".to_string(), json!(last_key));\n        \n        let response = client\n            .post("https://api.truss-security.com/product/search")\n            .header("x-api-key", API_KEY)\n            .header("Content-Type", "application/json")\n            .json(&next_query)\n            .send()\n            .await?;\n            \n        result = response.json::<Value>().await?;\n    }\n    \n    Ok(result)\n}'},S={sidebar_position:2,title:"Truss API Guide",toc_min_heading_level:2,toc_max_heading_level:3},C=void 0,D={},U=[{value:"Truss Search Endpoint",id:"truss-search-endpoint",level:2},{value:"Search by Date",id:"search-by-date",level:2},{value:"Boolean Search Filters",id:"boolean-search-filters",level:2},{value:"&#39;OR&#39; Filtering",id:"or-filtering",level:3},{value:"&#39;AND&#39; Filtering",id:"and-filtering",level:3},{value:"Paging",id:"paging",level:2},{value:"Last Evaluated Keys",id:"last-evaluated-keys",level:2},{value:"Initial Query Examples",id:"initial-query-examples",level:3},{value:"Using LastEvaluatedKey Examples",id:"using-lastevaluatedkey-examples",level:3},{value:"Pro API Tips",id:"pro-api-tips",level:2}];function V(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",p:"p",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)("div",{className:"text-center",children:(0,s.jsx)("h1",{className:"text-4xl font-bold mb-4",children:"Using the API"})}),"\n",(0,s.jsxs)("div",{className:"text-center mb-12",children:[(0,s.jsx)("p",{className:"text-xl text-gray-600 max-w-3xl mx-auto mb-4",children:(0,s.jsx)(n.p,{children:"The Truss API facilitates powerful endpoint query operations to provide access to Truss' security data. The API is designed to be used by developers to retrieve, filter, and analyze data efficiently."})}),(0,s.jsx)("p",{className:"text-xl italic text-gray-600 max-w-3xl mx-auto",children:(0,s.jsx)(n.p,{children:"Truss allows organizations to access the security data they need, in a way that is efficient and easy to use."})})]}),"\n",(0,s.jsxs)("div",{className:"relative my-12",children:[(0,s.jsx)("div",{className:"absolute inset-0 flex items-center","aria-hidden":"true",children:(0,s.jsx)("div",{className:"w-full border-t border-gray-300"})}),(0,s.jsx)("div",{className:"relative flex justify-center",children:(0,s.jsx)("span",{className:"bg-white px-3 text-base text-gray-500",children:"\u2022"})})]}),"\n",(0,s.jsx)(n.h2,{id:"truss-search-endpoint",children:"Truss Search Endpoint"}),"\n",(0,s.jsx)("p",{className:"text-lg mb-6",children:(0,s.jsxs)(n.p,{children:["The Truss ",(0,s.jsx)("code",{children:"/product/search"})," endpoint is designed to accommodate most data access needs. This endpoint allows you to retrieve comprehensive slices of security data based on a variety of filter parameters."]})}),"\n",(0,s.jsx)(K,{example:A}),"\n",(0,s.jsxs)("div",{className:"relative my-12",children:[(0,s.jsx)("div",{className:"absolute inset-0 flex items-center","aria-hidden":"true",children:(0,s.jsx)("div",{className:"w-full border-t border-gray-300"})}),(0,s.jsx)("div",{className:"relative flex justify-center",children:(0,s.jsx)("span",{className:"bg-white px-3 text-base text-gray-500",children:"\u2022"})})]}),"\n",(0,s.jsx)(n.h2,{id:"search-by-date",children:"Search by Date"}),"\n",(0,s.jsx)(n.p,{children:"There are several ways to search by date. The following parameters are supported:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"startdate:"})," Return products uploaded on or after this date."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"enddate:"})," Return products uploaded on or before this date."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"days:"})," Return products uploaded since N days ago."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Searches may be time boxed using the ",(0,s.jsx)(n.code,{children:"startdate"})," and ",(0,s.jsx)(n.code,{children:"enddate"})," parameters. Different date formats are supported:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.em,{children:"unix epoch time"}),' in milliseconds (e.g., "1717379710282")']}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.em,{children:"ISO"}),' format (e.g., "2024-06-02")']}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.em,{children:"Human readable"}),' format (e.g., "March 20, 2024")']}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"For example, the following example will return all security products entered since the specified start date (Sun Jun 2 2024) and before the specified end date (Mon Jun 3 2024)."}),"\n",(0,s.jsx)(K,{example:R}),"\n",(0,s.jsxs)(n.p,{children:["If a ",(0,s.jsx)(n.code,{children:"days"})," parameter is included the search returns security products entered since that number of days in the past to the current time. This parameter will be used in place of ",(0,s.jsx)(n.code,{children:"startdate"})," and ",(0,s.jsx)(n.code,{children:"enddate"})," parameters."]}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.p,{children:["When a ",(0,s.jsx)(n.code,{children:"days"})," parameter is entered, ",(0,s.jsx)(n.code,{children:"startdate"})," and ",(0,s.jsx)(n.code,{children:"enddate"})," parameters will be ignored."]})}),"\n",(0,s.jsx)(K,{example:T}),"\n",(0,s.jsxs)("div",{className:"relative my-12",children:[(0,s.jsx)("div",{className:"absolute inset-0 flex items-center","aria-hidden":"true",children:(0,s.jsx)("div",{className:"w-full border-t border-gray-300"})}),(0,s.jsx)("div",{className:"relative flex justify-center",children:(0,s.jsx)("span",{className:"bg-white px-3 text-base text-gray-500",children:"\u2022"})})]}),"\n",(0,s.jsx)(n.h2,{id:"boolean-search-filters",children:"Boolean Search Filters"}),"\n",(0,s.jsx)("p",{className:"text-lg mb-6",children:(0,s.jsx)(n.p,{children:"Boolean search filters can be used to narrow down the results of a query. Boolean search filters contain both the date parameters and the product parameters and are passed directly into the data field of the search request."})}),"\n",(0,s.jsx)(n.p,{children:"The following product parameters support boolean search filters:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"category:"}),' Array of category names (e.g., ["Ransomware", "OSINT"]).']}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"source:"}),' Array of source names (e.g., ["TOR Project"]).']}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"author:"}),' Array of author names (e.g., ["MohitK_"]).']}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"industry:"}),' Array of industry names (e.g., ["Finance"]).']}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"region:"}),' Array of region names (e.g., ["Europe"]).']}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"reference:"}),' Array of reference strings (e.g., ["',(0,s.jsx)(n.a,{href:"https://threatview.io/",children:"https://threatview.io/"}),'"]).']}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"tags:"}),' Array of tags (e.g., ["C2", "AlphV"]).']}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"or-filtering",children:"'OR' Filtering"}),"\n",(0,s.jsxs)(n.p,{children:["When searching for multiple values for a single parameter, the search performs an ",(0,s.jsx)(n.code,{children:"OR"}),' between the strings passed as an array to a single parameter. For example, if the values ["Ransomware", "OSINT"] are passed to the ',(0,s.jsx)(n.code,{children:"category"})," parameter, the search will return all security products where the ",(0,s.jsx)(n.code,{children:"category"}),' is "Ransomware" OR "OSINT".']}),"\n",(0,s.jsx)(n.h3,{id:"and-filtering",children:"'AND' Filtering"}),"\n",(0,s.jsxs)(n.p,{children:["If more than one parameter is specified in a search (e.g., ",(0,s.jsx)(n.code,{children:"category"})," and ",(0,s.jsx)(n.code,{children:"source"}),"), then the search will return those products that satisfy BOTH of the specified parameters. In other words, the search performs an ",(0,s.jsx)(n.code,{children:"AND"})," between the different parameters."]}),"\n",(0,s.jsxs)(n.p,{children:['For example, if ["Ransomeware"] is passed to the ',(0,s.jsx)(n.code,{children:"category"}),' parameter and the ["TOR Project"] is passed to the ',(0,s.jsx)(n.code,{children:"source"})," parameter, the search will return all security products where the ",(0,s.jsx)(n.code,{children:"category"}),' is "Ransomeware" AND where the ',(0,s.jsx)(n.code,{children:"source"}),' is "TOR Project".']}),"\n",(0,s.jsx)(n.p,{children:"Consider the following filter:"}),"\n",(0,s.jsx)(K,{example:O}),"\n",(0,s.jsxs)("div",{className:"relative my-12",children:[(0,s.jsx)("div",{className:"absolute inset-0 flex items-center","aria-hidden":"true",children:(0,s.jsx)("div",{className:"w-full border-t border-gray-300"})}),(0,s.jsx)("div",{className:"relative flex justify-center",children:(0,s.jsx)("span",{className:"bg-white px-3 text-base text-gray-500",children:"\u2022"})})]}),"\n",(0,s.jsx)(n.h2,{id:"paging",children:"Paging"}),"\n",(0,s.jsx)("p",{className:"text-lg mb-6",children:(0,s.jsxs)(n.p,{children:["When a product search results in a large number of products, only a subset of the total will be returned by each call to the ",(0,s.jsx)("code",{children:"/product/search"})," endpoint. In these cases, the initial calls will return metadata in the form of a ",(0,s.jsx)("code",{children:"LastEvaluatedKey"})," that can be used to page through the results."]})}),"\n",(0,s.jsx)(K,{example:Y}),"\n",(0,s.jsxs)("div",{className:"relative my-12",children:[(0,s.jsx)("div",{className:"absolute inset-0 flex items-center","aria-hidden":"true",children:(0,s.jsx)("div",{className:"w-full border-t border-gray-300"})}),(0,s.jsx)("div",{className:"relative flex justify-center",children:(0,s.jsx)("span",{className:"bg-white px-3 text-base text-gray-500",children:"\u2022"})})]}),"\n",(0,s.jsx)(n.h2,{id:"last-evaluated-keys",children:"Last Evaluated Keys"}),"\n",(0,s.jsx)("p",{className:"text-lg mb-6",children:(0,s.jsxs)(n.p,{children:["When working with large datasets, the Truss API implements pagination to ensure efficient data retrieval. If your query returns a ",(0,s.jsx)("code",{children:"LastEvaluatedKey"})," in the response, this indicates there are more results available. To retrieve the next set of results, include this key in your subsequent query."]})}),"\n",(0,s.jsx)("p",{className:"text-lg mb-6",children:(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)("code",{children:"LastEvaluatedKey"})," acts as a bookmark, telling the API where to resume fetching results. This pagination mechanism ensures optimal performance while allowing you to retrieve complete result sets."]})}),"\n",(0,s.jsx)(n.h3,{id:"initial-query-examples",children:"Initial Query Examples"}),"\n",(0,s.jsx)(K,{example:k}),"\n",(0,s.jsx)("p",{className:"text-lg mb-6",children:(0,s.jsx)(n.p,{children:"When using the curl command, the API returns a response containing a LastEvaluatedKey, it will look like this:"})}),"\n",(0,s.jsx)("pre",{className:"text-sm bg-gray-50 p-4 rounded-md",children:'\n  {\n    "LastEvaluatedKey": {\n      "SK": "VER#0",\n      "GSI3PK": "OpenPhish",\n      "PK": "PROD#01JEMBFNT12JV97ZT3GVBF2X2J",\n      "GSI3SK": 1733702440770\n    }\n  }\n'}),"\n",(0,s.jsx)(n.h3,{id:"using-lastevaluatedkey-examples",children:"Using LastEvaluatedKey Examples"}),"\n",(0,s.jsx)(K,{example:N}),"\n",(0,s.jsxs)("div",{className:"relative my-12",children:[(0,s.jsx)("div",{className:"absolute inset-0 flex items-center","aria-hidden":"true",children:(0,s.jsx)("div",{className:"w-full border-t border-gray-300"})}),(0,s.jsx)("div",{className:"relative flex justify-center",children:(0,s.jsx)("span",{className:"bg-white px-3 text-base text-gray-500",children:"\u2022"})})]}),"\n",(0,s.jsx)(n.h2,{id:"pro-api-tips",children:"Pro API Tips"}),"\n",(0,s.jsxs)("div",{className:"grid grid-cols-1 md:grid-cols-2 gap-6 my-8",children:[(0,s.jsxs)("div",{className:"bg-blue-50 p-6 rounded-lg shadow-md border border-green-100 my-6",children:[(0,s.jsx)("h3",{className:"text-xl font-bold mb-4 text-blue-800",children:"Advanced API Techniques"}),(0,s.jsxs)("ul",{className:"list-disc pl-6 space-y-2",children:[(0,s.jsxs)("li",{children:[(0,s.jsx)("span",{className:"font-semibold",children:"Pagination:"})," Handle large result sets efficiently by adding pagination to your client"]}),(0,s.jsxs)("li",{children:[(0,s.jsx)("span",{className:"font-semibold",children:"Filter Chaining:"})," Combine multiple filters for precise results"]}),(0,s.jsxs)("li",{children:[(0,s.jsx)("span",{className:"font-semibold",children:"Date Formatting:"})," You can use various date formats for flexibility. epoch, day range, or human readable"]}),(0,s.jsxs)("li",{children:[(0,s.jsx)("span",{className:"font-semibold",children:"Error Handling:"})," Implement robust error handling through your client to handle errors gracefully"]})]})]}),(0,s.jsxs)("div",{className:"bg-blue-50 p-6 rounded-lg shadow-md border border-green-100 my-6",children:[(0,s.jsx)("h3",{className:"text-xl font-bold mb-4 text-blue-800",children:"API Best Practices"}),(0,s.jsxs)("ul",{className:"list-disc pl-6 space-y-2",children:[(0,s.jsx)("li",{children:"Cache responses when appropriate"}),(0,s.jsx)("li",{children:"Implement rate limiting in your client"}),(0,s.jsx)("li",{children:"Use proper error handling and retries"}),(0,s.jsx)("li",{children:"Your API key is sensitive to your account. Do not share it with anyone."})]})]})]}),"\n",(0,s.jsx)("div",{className:"mt-12 p-6 bg-blue-50 rounded-lg shadow-md border border-blue-100 text-center",children:(0,s.jsx)("p",{className:"text-lg font-medium text-blue-800",children:(0,s.jsx)(n.p,{children:"The Truss API is your tool for accessing and managing security intelligence data. Use these endpoints to retrieve, filter, and analyze data efficiently."})})})]})}function L(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(V,{...e})}):V(e)}}}]);